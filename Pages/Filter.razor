@page "/filter"

@using System.Net.Http

@inject HttpClient client

@using Newtonsoft.Json
@using Data

@using Microsoft.Extensions.Logging
@inject ILogger<Filter> Logger

<div class="container-fluid">

    <div class="row justify-content-center" style="margin-bottom:50px">
        <h3 class="text-center">Store Apps - Filter</h3>
    </div>

    <div class="row" style="margin:25px;">

        @if (StoreApps != null)
        {
            <table class="table table-bordered table-striped">
                <thead class="thead-dark">
                    <tr>
                        <th>
                            Id
                        </th>
                        <th>
                            Name
                        </th>
                        <th>
                            Rating
                        </th>
                        <th>
                            People
                        </th>
                        <th>
                            Category
                                @*Dropdown menu with the selection binded*@ 
                                <select Id="CategoryList" class="form-control" @bind=@categoryModel.CategoryName>
                                    <option value=”Select”>Filter</option>
                                    <option value=”Books”>Books</option>
                                    <option value=”Business”>Business</option>
                                    <option value=”DeveloperTools”>Developer Tools</option>
                                    <option value=”Food&Dining”>Food And Dining</option>
                                    <option value=”Government&Politics”>Government And Politics</option>
                                    <option value=”Health&Fitness”>Health And Fitness</option>
                                    <option value=”Kids&Family”>Kids And Family</option>
                                    <option value=”Lifestlye”>Lifestyle</option>
                                    <option value=”MultimediaDesign”>Multimedia Design</option>
                                    <option value=”Music”>Music</option>
                                    <option value=”Navigation&Maps”>Navigation And Maps</option>
                                    <option value=”News&Weather”>News And Weather</option>
                                    <option value=”Social”>Social</option>
                                </select>
                                
                                @*button that executes method when clicked*@
                                <button type="submit" @onclick="@EnterUserInput">Filter</button>
                                
                                @*Confirms correct selection and ensures that bind has been populated with selection*@
                                <p>Selected category is: @categoryModel.CategoryName</p>

                        </th>
                        <th>
                            Date
                        </th>
                        <th>
                            >Price
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var storeapp in StoreApps)
                    {
                        <tr class="justify-content-center">
                            <td>@storeapp.Id</td>
                            <td>@storeapp.Name</td>
                            <td>@storeapp.Rating</td>
                            <td>@storeapp.People</td>
                            <td>@storeapp.Category</td>
                            <td>@storeapp.Date</td>
                            <td>@storeapp.Price</td>

                        </tr>
                    }
                </tbody>
            </table>
        }
        @if (!StoreApps.Any())
            {
                <div class="justify-content-center">
                    <h5>No records to show - select filter</h5>
                </div>
            }
    </div>

</div>

@code {

    //new obj of CategoryModel
    public CategoryModel categoryModel = new();

    //List to store apps that API returns
    public List<StoreApp> StoreApps = new List<StoreApp>();

    //method to handle user selection - calls GetFilter() method with binded value from dropdown menu selection
    private async void EnterUserInput()
    {
        await GetFilter(categoryModel.CategoryName);
        //await GetFilter(categoryModel.CategoryName.Replace('"', '');
    }

    //api/StoreApps/category/Business <-- target apiName

    public async Task GetFilter(string selection)
    {
        //apiName returning as "api/StoreApps/category/"Business"" - need to remove quotes from "Business"
        var apiName = "api/StoreApps/category/" + selection.Substring(1, selection.Length - 2);
        //apiName += selection.Replace('"', '');
        //apiName += selection.Replace("\"", "");
        //apiName += selection.Trim('"');

        //Logger to check apiName is correct in output while debugging
        Logger.LogInformation(apiName);

        //use Http client to give API a GET request using the apiName to call correct HttpGet method 
        var httpResponse = await client.GetAsync(apiName);

        //for storing the returned data from GET method
        string responseBody = "";

        if (httpResponse.IsSuccessStatusCode)
        {
            //if status 200, read the content of the GET method and store as a string in responseBody
            responseBody = await httpResponse.Content.ReadAsStringAsync();
            //populate the StoreApps list with the content of from the response body
            StoreApps = JsonConvert.DeserializeObject<List<StoreApp>>(responseBody);
            //re-renders state so that another action can be performed 
            StateHasChanged();
        }

    }

}
