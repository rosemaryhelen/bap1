@page "/sort"
@using System.Net.Http

@inject HttpClient client

@using Newtonsoft.Json
@using Data



<h1 class="text-center" >Store Apps Sort</h1>

    <p class = "text-center"><em> This page allows for the sorting of the store apps data by property in ascending and descending order</em></p>

<div class="container-fluid">

    <div class="row justify-content-center" style="margin-bottom:50px">
       
    </div>

    <div class="row" style="margin:25px;">

        @*checking if the data is null or not*@
        @if (StoreApps != null)
        {
            @*Creating the table and linked headers to allow for the sorting of the data via defined methods*@
            <table class="table table-bordered table-striped">
                <thead class="thead-dark">
                    <tr>
                        <th>
                            <a style="color:azure" href="javascript://" @onclick="@Id_SortAsc">Id Asc ||</a>
                            <a style="color:azure" href="javascript://" @onclick="@Id_SortDesc">Id Desc</a>
                        </th>
                        <th>
                            <a style="color:azure" href="javascript://" @onclick="@Name_SortAsc">Name Asc || </a>
                            <a style="color:azure" href="javascript://" @onclick="@Name_SortDesc">Name Desc</a>
                        </th>
                        <th>
                            <a style="color:azure" href="javascript://" @onclick="@Rating_SortAsc">Rating Asc || </a>
                            <a style="color:azure" href="javascript://" @onclick="@Rating_SortDesc">Rating Desc</a>
                        </th>
                        <th>
                            <a style="color:azure" href="javascript://" @onclick="@People_SortAsc">People Asc || </a>
                            <a style="color:azure" href="javascript://" @onclick="@People_SortDesc">People Desc</a>
                        </th>
                        <th>
                            <a style="color:azure" href="javascript://" @onclick="@Category_SortAsc">Category Asc || </a>
                            <a style="color:azure" href="javascript://" @onclick="@Category_SortDesc">Category Desc</a>
                        </th>
                        <th>
                            <a style="color:azure" href="javascript://" @onclick="@Date_SortAsc">Date Asc ||</a>
                            <a style="color:azure" href="javascript://" @onclick="@Date_SortDesc">Date Desc</a>
                        </th>
                        <th>
                            <a style="color:azure" href="javascript://" @onclick="@Price_SortAsc">Price Asc ||</a>
                            <a style="color:azure" href="javascript://" @onclick="@Price_SortDesc">Price Desc</a>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var storeapp in StoreApps)
                    {
                        <tr class="justify-content-center">
                            <td>@storeapp.Id</td>
                            <td>@storeapp.Name</td>
                            <td>@storeapp.Rating</td>
                            <td>@storeapp.People</td>
                            <td>@storeapp.Category</td>
                            <td>@storeapp.Date</td>
                            <td>@storeapp.Price</td>

                        </tr>
                    }@*for each*@
                </tbody>
            </table>
        }
        @if (!StoreApps.Any())
        {
            <div class="justify-content-center">
                <h5>No records to show</h5>
            </div>
        }@*if statement*@
    </div>

</div>

@code {

    string responseBody = "";
    List<StoreApp> StoreApps = new List<StoreApp>();



    protected override async Task OnInitializedAsync()
    {
        var apiName = "api/StoreApps";
        var httpResponse = await client.GetAsync(apiName);

        if (httpResponse.IsSuccessStatusCode)
        {
            responseBody = await httpResponse.Content.ReadAsStringAsync();
            StoreApps = JsonConvert.DeserializeObject<List<StoreApp>>(responseBody);
            StateHasChanged();
        }

    }

    //Methods to sort the data in ascending or descending order as called in the table above
    //Methods to sort properties in Ascending Order
    //Id
    public void Id_SortAsc()
    {

        StoreApps.Sort((x, y) => x.Id.CompareTo(y.Id));
    }

    //Name
    public void Name_SortAsc()
    {
        StoreApps.Sort((x, y) => x.Name.CompareTo(y.Name));

    }

    //Rating
    public void Rating_SortAsc()
    {
        StoreApps.Sort((x, y) => x.Rating.CompareTo(y.Rating));

    }

    //People
    public void People_SortAsc()
    {
        StoreApps.Sort((x, y) => x.People.CompareTo(y.People));

    }

    //Date
    public void Date_SortAsc()
    {
        StoreApps.Sort((x, y) => x.Date.CompareTo(y.Date));

    }

    //Category
    public void Category_SortAsc()
    {
        StoreApps.Sort((x, y) => x.Category.CompareTo(y.Category));

    }

    //Price
    public void Price_SortAsc()
    {
        StoreApps.Sort((x, y) => x.Price.CompareTo(y.Price));

    }

    //Methods to sort properties in Descending Order
    //Id
    public void Id_SortDesc()
    {

        StoreApps.Sort((x, y) => y.Id.CompareTo(x.Id));

    }

    //Name 
    public void Name_SortDesc()
    {

        StoreApps.Sort((x, y) => y.Name.CompareTo(x.Name));
    }

    //Rating

    public void Rating_SortDesc()
    {

        StoreApps.Sort((x, y) => y.Rating.CompareTo(x.Rating));
    }

    //People

    public void People_SortDesc()
    {

        StoreApps.Sort((x, y) => y.People.CompareTo(x.People));
    }

    //Category

    public void Category_SortDesc()
    {

        StoreApps.Sort((x, y) => y.Category.CompareTo(x.Category));
    }

    //Date
    public void Date_SortDesc()
    {

        StoreApps.Sort((x, y) => y.Date.CompareTo(x.Date));
    }

    //Price
    public void Price_SortDesc()
    {

        StoreApps.Sort((x, y) => y.Price.CompareTo(x.Price));
    }

}