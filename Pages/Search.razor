@page "/search"
@using System.Net.Http

@inject HttpClient client

@using Newtonsoft.Json
@using Data

@using Microsoft.Extensions.Logging
@inject ILogger<Search> Logger

<h1>Search</h1>

<p>This component demonstrates searching the datasaset.</p>
@*EditForm to manage user input - ensures validation rule and prompts user for input*@
<EditForm Model="@searchModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @*bind the value of input and set it as the searchModel Name*@
    <InputText id="name" @bind-Value="searchModel.Name" />

    @*onclick of button execute EnterUserInput() method*@
    <button type="submit" @onclick="@EnterUserInput">Search</button>

</EditForm>

<div class="container-fluid">

    <div class="row justify-content-center" style="margin-bottom:50px">
        <h3 class="text-center" style="color:cornflowerblue">Microsoft Store Apps:<br />App Data</h3>

    </div>

    <div class="row" style="margin:25px;">

        @if (StoreApps != null)
        {
            <table class="table table-bordered table-striped">
                <thead class="thead-light">
                    <tr>
                        <th>Id</th>
                        <th>Name</th>
                        <th>Rating</th>
                        <th>People</th>
                        <th>Category</th>
                        <th>Date</th>
                        <th>Price</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var storeapp in StoreApps)
                    {

                        <tr class="justify-content-center">
                            <td>@storeapp.Id</td>
                            <td>@storeapp.Name</td>
                            <td>@storeapp.Rating</td>
                            <td>@storeapp.People</td>
                            <td>@storeapp.Category</td>
                            <td>@storeapp.Date</td>
                            <td>@storeapp.Price</td>

                        </tr>
                    }
                </tbody>
            </table>
        }

        @if (StoreApps == null)
        {
            <div class="justify-content-center">
                <h5>No records to show</h5>
            </div>
        }

    </div>

</div>

@code {
    //new instance of obj.
    public SearchModel searchModel = new();

    //new List 
    public List<StoreApp> StoreApps = new List<StoreApp>();

    //if form entry is valid as per validation rule, run this method.
    private void HandleValidSubmit()
    {
        Logger.LogInformation("HandleValidSubmit called");
        Logger.LogInformation(searchModel.Name);

    }

    //method to call search method with user input as parameter
    private async void EnterUserInput()
    {
        await GetSearch(searchModel.Name);
    }

    //use Http client to give API a GET request using the apiName to call correct HttpGet method
    string responseBody = "";

    //string search = searchModel.Name -> EnterUserInput() 
    public async Task GetSearch(string search)
    {
        //apiName to be passed to in GET method
        var apiName = "api/StoreApps/";
        //append search onto end of apiName. Target -> api/StoreApps/{search}
        apiName += search;
        //use Http client to give API a GET request using the apiName to call correct HttpGet method 
        var httpResponse = await client.GetAsync(apiName);

        //returns status 200
        if (httpResponse.IsSuccessStatusCode)
        {
            //if status 200, read the content of the GET method and store as a string in responseBody
            responseBody = await httpResponse.Content.ReadAsStringAsync();
            //populate the StoreApps list with the content of from the response body
            StoreApps = JsonConvert.DeserializeObject<List<StoreApp>>(responseBody);
            //re-renders state so that another action can be performed
            StateHasChanged();
        }

    }



}